[{"id":"6fd2613b63b979add31ea79871f3311b","title":"促销天数","content":"12345678910111213141516171819202122232425262728293031323334353637383940SELECT     id,     sum(group_days) AS sum_group_days FROM (    SELECT         id, group_id , DATEDIFF ( MAX(edt), MIN(stt) ) + 1  AS group_days    FROM     (        SELECT             *,            SUM(                CASE WHEN stt &gt; max_lag_edt THEN 1                 ELSE 0                 END             ) OVER( PARTITION BY id ORDER BY stt ) AS group_id        FROM         (            SELECT                *,                MAX(lag_edt) OVER( PARTITION BY id ORDER BY stt ) AS max_lag_edt            FROM             (                SELECT                     id,                     stt,                     edt,                     lag(edt, 1, &#x27;1970-01-01&#x27;) OVER (PARTITION BY id ORDER BY stt) AS lag_edt                FROM                     test4             ) AS test4         ) AS test4    )AS test4     GROUP BY         id, group_id ) AS test4GROUP BY     id\n\n\n\n12345678910111213141516171819202122232425262728293031323334SELECT     id,     sum(group_days) AS sum_group_days FROM (    SELECT         id, group_id , DATEDIFF ( MAX(edt), MIN(stt) ) + 1  AS group_days    FROM     (        SELECT             *,            SUM(                CASE                     WHEN stt &gt; max_lag_edt THEN 1                     WHEN max_lag_edt IS NULL THEN 1                 ELSE 0                 END             ) OVER( PARTITION BY id ORDER BY stt ) AS group_id        FROM         (            SELECT                 id,                 stt,                 edt,                 MAX(edt) OVER (PARTITION BY id ORDER BY stt ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS max_lag_edt            FROM                 test4         ) AS test4    )AS test4     GROUP BY         id, group_id ) AS test4GROUP BY     id\n\n","slug":"促销天数","date":"2023-10-09T07:15:51.000Z","categories_index":"","tags_index":"","author_index":"艾木简 安斤涅尔"},{"id":"c034940dbc0051fc749d572e50027a6a","title":"连续问题","content":"123456CREATE TABLE test (    id STRING,    dt STRING,    lowcarbon BIGINT)ROW FORMAT DELIMITED FIELDS TERMINATED BY &#x27;,&#x27;;\n\n\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273SELECT     DISTINCT idFROM (    SELECT         *         ,lag(dt, 2, &#x27;1970-01-01&#x27;) over (PARTITION BY id order by dt) as last_dt    FROM         (            SELECT                 id, dt, sum(lowcarbon) AS lowcarbon             FROM                 test             GROUP BY                 id, dt             HAVING                 sum(lowcarbon) &gt; 100         ) AS test     --  WHERE        --  lowcarbon &lt; 100) AS test_ext WHERE         datediff(dt, last_dt) = 2------------------------------------------------ ------------------------------------------------SELECT     idFROM (    SELECT         id,         dt,         DATE_SUB(dt, rn) AS tmp     FROM     (        SELECT             id                                               AS id            ,dt                                              AS dt            ,lowcarbon                                       AS lowcarbon            ,row_number() over (PARTITION BY id ORDER BY dt) AS rn        FROM         (            SELECT                 id             AS id,                dt             AS dt,                SUM(lowcarbon) AS lowcarbon            FROM                 test             GROUP BY                 id, dt             HAVING                 SUM(lowcarbon) &gt; 100         ) AS test     ) AS test) AS test GROUP BY     id , tmp HAVING     COUNT(tmp) &gt;= 3 select     id, dt, sum(lowcarbon)  as lowcarbon from     test group by     id, dt having     sum(lowcarbon) &gt; 100 \n","slug":"连续问题","date":"2023-10-09T03:24:47.000Z","categories_index":"","tags_index":"","author_index":"艾木简 安斤涅尔"},{"id":"aa32fc7a631605a065175b50ec865acf","title":"11111.md","content":"asdfasdfasdfasdfasdfasdf\n","slug":"11111-md","date":"2023-09-05T14:43:38.000Z","categories_index":"","tags_index":"AA","author_index":"艾木简 安斤涅尔"},{"id":"ec2b484bceead2a2fd6d1018932be776","title":"MyNew","content":"asdfasdfasdfasdfasdfasfasdfasdfaasdfasdfa\nbasdfasddfggshafdgasdfasdfasdfas\n","slug":"MyNew","date":"2023-09-05T14:36:11.000Z","categories_index":"","tags_index":"BB","author_index":"艾木简 安斤涅尔"},{"id":"0191534fe3956cf7ba592ffe84abb073","title":"bb","content":"","slug":"bb","date":"2023-09-05T14:33:07.000Z","categories_index":"","tags_index":"A","author_index":"艾木简 安斤涅尔"},{"id":"50af44486aca4bbf6cacd08ad9c5eb5c","title":"AA","content":"","slug":"AA","date":"2023-09-05T11:33:25.000Z","categories_index":"","tags_index":"","author_index":"艾木简 安斤涅尔"},{"id":"1e90bc8ae58503d718430d6bef13183b","title":"vimconfig","content":"MY CONFIG FOR SPACEVIMBASIC CONFIG123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211#=============================================================================# basic.toml --- basic configuration example for SpaceVim# Copyright (c) 2016-2023 Wang Shidong &amp; Contributors# Author: Wang Shidong &lt; wsdjeg@outlook.com &gt;# URL: https://spacevim.org# License: GPLv3#=============================================================================# All SpaceVim option below [option] section[options]    # set spacevim theme. by default colorscheme layer is not loaded,    # if you want to use more colorscheme, please load the colorscheme    # layer    colorscheme = &quot;gruvbox&quot;\t\tcolorscheme_bg = &quot;dark&quot;    # Disable guicolors in basic mode, many terminal do not support 24bit    # true colors    enable_guicolors = false    # Disable statusline separator, if you want to use other value, please    # install nerd fonts    # statusline_separator = &quot;nil&quot;    # statusline_iseparator = &quot;bar&quot;    # buffer_index_type = 4    # windows_index_type = 3    enable_tabline_filetype_icon = false    enable_statusline_mode = false    statusline_unicode = false    # Enable vim compatible mode, avoid changing origin vim key bindings    vimcompatible = true[options]    bootstrap_before = &quot;myspacevim#before&quot;    bootstrap_after  = &quot;myspacevim#after&quot;[[custom_plugins]]repo=&#x27;wellle/targets.vim&#x27;merged=false[[custom_plugins]]repo=&#x27;terryma/vim-expand-region&#x27;merged=false[[custom_plugins]]repo=&#x27;tomtom/tlib_vim&#x27;merged=false[[custom_plugins]]repo=&#x27;mattn/webapi-vim&#x27;merged=false[[custom_plugins]]repo=&#x27;tyru/open-browser.vim&#x27;merged=false[[custom_plugins]]repo=&#x27;mg979/vim-visual-multi&#x27;merged=false[[custom_plugins]]repo=&#x27;tpope/vim-repeat&#x27;merged=false[[custom_plugins]]repo=&#x27;airblade/vim-gitgutter&#x27;merged=false[[custom_plugins]]repo=&#x27;scrooloose/nerdcommenter&#x27;merged=false[[custom_plugins]]repo=&#x27;tpope/vim-fugitive&#x27;merged=false[[custom_plugins]]repo=&#x27;szw/vim-maximizer&#x27;merged=false[[custom_plugins]]repo=&#x27;mattn/emmet-vim&#x27;merged=false[[custom_plugins]]repo=&#x27;vim-scripts/Mark&#x27;merged=false[[custom_plugins]]repo=&#x27;yegappan/mru&#x27;merged=false[[custom_plugins]]repo=&#x27;junegunn/vim-easy-align&#x27;merged=false[[custom_plugins]]repo=&#x27;j5shi/SearchComplete&#x27;merged=false[[custom_plugins]]repo=&#x27;vim-scripts/CmdlineComplete&#x27;merged=false[[custom_plugins]]repo=&#x27;jiangmiao/auto-pairs&#x27;merged=false[[custom_plugins]]repo=&#x27;MattesGroeger/vim-bookmarks&#x27;merged=false[[custom_plugins]]repo= &#x27;autowitch/hive.vim&#x27;merged=false[[custom_plugins]]repo=&#x27;github/copilot.vim&#x27;merged=false[[custom_plugins]]repo=&#x27;skywind3000/asyncrun.vim&#x27;merged=false[[custom_plugins]]repo=&quot;XadillaX/json-formatter.vim&quot;merged=false[[custom_plugins]]repo=&quot;godlygeek/tabular&quot;merged=false[[custom_plugins]]repo=&quot;vim-scripts/matchit.zip&quot;merged=false[[custom_plugins]]repo=&#x27;tbodt/deoplete-tabnine&#x27;merged=false[[custom_plugins]]repo=&#x27;wellle/tmux-complete.vim&#x27;merged=false[[custom_plugins]]repo=&#x27;jrozner/vim-antlr&#x27;merged=false[[custom_plugins]]repo=&#x27;MattesGroeger/vim-bookmarks&#x27;merged=false[[custom_plugins]]repo=&#x27;gennaro-tedesco/nvim-peekup&#x27;merged=false[[custom_plugins]]repo=&#x27;tpope/vim-speeddating&#x27;merged=false[[custom_plugins]]repo=&#x27;easymotion/vim-easymotion&#x27;merged=false[[custom_plugins]]repo=&#x27;psf/black&#x27;merged=false[[custom_plugins]]repo=&#x27;lyokha/vim-xkbswitch&#x27;merged=false[[custom_plugins]]repo=&#x27;liuchengxu/graphviz.vim&#x27;merged=false[[custom_plugins]]repo=&#x27;psliwka/vim-smoothie&#x27;merged=false[[custom_plugins]]repo=&#x27;rust-lang/rust.vim&#x27;merged=false[[custom_plugins]]repo=&#x27;racer-rust/vim-racer&#x27;merged=false[[custom_plugins]]repo=&#x27;pangloss/vim-javascript&#x27;merged=false[[custom_plugins]]repo=&#x27;marko-cerovac/material.nvim&#x27;merged=false[[custom_plugins]]repo=&#x27;integralist/vim-mypy&#x27;merged=false[[custom_plugins]]repo=&#x27;leafgarland/typescript-vim&#x27;merge=false[[custom_plugins]]repo=&#x27;ap/vim-css-color&#x27;merge=false\n\n\nfunction! myspacevim#before() abort call SpaceVim#custom#SPCGroupName([&#x27;G&#x27;], &#x27;+TestGroup&#x27;) call SpaceVim#custom#SPC(&#x27;nore&#x27;, [&#x27;G&#x27;, &#x27;t&#x27;], &#x27;echom 1&#x27;, &#x27;echomessage 1&#x27;, 1)  &quot; let profile = SpaceVim#mapping#search#getprofile(&#x27;rg&#x27;)&quot; let default_opt = profile.default_opts + [&#x27;--no-ignore-vcs&#x27;]&quot; call SpaceVim#mapping#search#profile(&#123;&#x27;rg&#x27; : &#123;&#x27;default_opts&#x27; : default_opt&#125;&#125;)set clipboard+=unnamed&quot;禁止生成临时文件set noswapfile&quot; 光标移动到buffer的顶部和底部时保持3行距离map &lt;leader&gt;&lt;leader&gt;h :MRU&lt;CR&gt; func! SqlToUpper()    %s/\\&lt;select\\&gt;\\|\\&lt;from\\&gt;\\|\\&lt;as\\&gt;\\|\\&lt;where\\&gt;\\|\\&lt;if\\&gt;\\|\\&lt;not\\&gt;\\|\\&lt;group\\&gt;\\|\\&lt;by\\&gt;\\|\\&lt;left\\&gt;\\|\\&lt;right\\&gt;\\|\\&lt;join\\&gt;\\|\\&lt;outer\\&gt;\\|\\&lt;full\\&gt;\\|\\&lt;to_date\\&gt;\\|\\&lt;from_unixtime\\&gt;\\|\\&lt;unixtime_stamp\\&gt;\\|\\&lt;when\\&gt;\\|\\&lt;case\\&gt;\\|\\&lt;then\\&gt;\\|\\&lt;max\\&gt;\\|\\&lt;min\\&gt;\\|\\&lt;avg\\&gt;\\|\\&lt;end\\&gt;\\|\\&lt;else\\&gt;\\|\\&lt;and\\&gt;\\|\\&lt;or\\&gt;\\|\\&lt;on\\&gt;\\|\\&lt;count\\&gt;\\|\\&lt;sum\\&gt;|\\&lt;use\\&gt;|\\&lt;limit\\&gt;/\\U&amp;/g    %s/\\&lt;add\\&gt;\\|\\&lt;admin\\&gt;\\|\\&lt;after\\&gt;\\|\\&lt;analyze\\&gt;\\|\\&lt;archive\\&gt;\\|\\&lt;asc\\&gt;\\|\\&lt;before\\&gt;\\|\\&lt;bucket\\&gt;\\|\\&lt;buckets\\&gt;\\|\\&lt;cascade\\&gt;\\|\\&lt;change\\&gt;\\|\\&lt;cluster\\&gt;\\|\\&lt;clustered\\&gt;\\|\\&lt;clusterstatus\\&gt;\\|\\&lt;collection\\&gt;\\|\\&lt;columns\\&gt;\\|\\&lt;comment\\&gt;\\|\\&lt;compact\\&gt;\\|\\&lt;compactions\\&gt;\\|\\&lt;compute\\&gt;\\|\\&lt;concatenate\\&gt;\\|\\&lt;continue\\&gt;\\|\\&lt;data\\&gt;\\|\\&lt;databases\\&gt;\\|\\&lt;datetime\\&gt;\\|\\&lt;day\\&gt;\\|\\&lt;dbproperties\\&gt;\\|\\&lt;deferred\\&gt;\\|\\&lt;defined\\&gt;\\|\\&lt;delimited\\&gt;\\|\\&lt;dependency\\&gt;\\|\\&lt;desc\\&gt;\\|\\&lt;directories\\&gt;\\|\\&lt;directory\\&gt;\\|\\&lt;disable\\&gt;\\|\\&lt;distribute\\&gt;\\|\\&lt;elem_type\\&gt;\\|\\&lt;enable\\&gt;\\|\\&lt;escaped\\&gt;\\|\\&lt;exclusive\\&gt;\\|\\&lt;explain\\&gt;\\|\\&lt;export\\&gt;\\|\\&lt;fields\\&gt;\\|\\&lt;file\\&gt;\\|\\&lt;fileformat\\&gt;\\|\\&lt;first\\&gt;\\|\\&lt;format\\&gt;\\|\\&lt;formatted\\&gt;\\|\\&lt;functions\\&gt;\\|\\&lt;hold_ddltime\\&gt;\\|\\&lt;idxproperties\\&gt;\\|\\&lt;ignore\\&gt;\\|\\&lt;index\\&gt;\\|\\&lt;indexes\\&gt;\\|\\&lt;inpath\\&gt;\\|\\&lt;inputdriver\\&gt;\\|\\&lt;inputformat\\&gt;\\|\\&lt;items\\&gt;\\|\\&lt;jar\\&gt;\\|\\&lt;keys\\&gt;\\|\\&lt;key_type\\&gt;\\|\\&lt;limit\\&gt;\\|\\&lt;lines\\&gt;\\|\\&lt;load\\&gt;\\|\\&lt;location\\&gt;\\|\\&lt;lock\\&gt;\\|\\&lt;locks\\&gt;\\|\\&lt;logical\\&gt;\\|\\&lt;long\\&gt;\\|\\&lt;mapjoin\\&gt;\\|\\&lt;materialized\\&gt;\\|\\&lt;metadata\\&gt;\\|\\&lt;minus\\&gt;\\|\\&lt;minute\\&gt;\\|\\&lt;month\\&gt;\\|\\&lt;msck\\&gt;\\|\\&lt;noscan\\&gt;\\|\\&lt;no_drop\\&gt;\\|\\&lt;offline\\&gt;\\|\\&lt;option\\&gt;\\|\\&lt;outputdriver\\&gt;\\|\\&lt;outputformat\\&gt;\\|\\&lt;overwrite\\&gt;\\|\\&lt;owner\\&gt;\\|\\&lt;partitioned\\&gt;\\|\\&lt;partitions\\&gt;\\|\\&lt;plus\\&gt;\\|\\&lt;pretty\\&gt;\\|\\&lt;principals\\&gt;\\|\\&lt;protection\\&gt;\\|\\&lt;purge\\&gt;\\|\\&lt;read\\&gt;\\|\\&lt;readonly\\&gt;\\|\\&lt;rebuild\\&gt;\\|\\&lt;recordreader\\&gt;\\|\\&lt;recordwriter\\&gt;\\|\\&lt;regexp\\&gt;\\|\\&lt;reload\\&gt;\\|\\&lt;rename\\&gt;\\|\\&lt;repair\\&gt;\\|\\&lt;replace\\&gt;\\|\\&lt;replication\\&gt;\\|\\&lt;restrict\\&gt;\\|\\&lt;rewrite\\&gt;\\|\\&lt;rlike\\&gt;\\|\\&lt;role\\&gt;\\|\\&lt;roles\\&gt;\\|\\&lt;schema\\&gt;\\|\\&lt;schemas\\&gt;\\|\\&lt;second\\&gt;\\|\\&lt;semi\\&gt;\\|\\&lt;serde\\&gt;\\|\\&lt;serdeproperties\\&gt;\\|\\&lt;server\\&gt;\\|\\&lt;sets\\&gt;\\|\\&lt;shared\\&gt;\\|\\&lt;show\\&gt;\\|\\&lt;show_database\\&gt;\\|\\&lt;skewed\\&gt;\\|\\&lt;sort\\&gt;\\|\\&lt;sorted\\&gt;\\|\\&lt;ssl\\&gt;\\|\\&lt;statistics\\&gt;\\|\\&lt;stored\\&gt;\\|\\&lt;streamtable\\&gt;\\|\\&lt;string\\&gt;\\|\\&lt;struct\\&gt;\\|\\&lt;tables\\&gt;\\|\\&lt;tblproperties\\&gt;\\|\\&lt;temporary\\&gt;\\|\\&lt;terminated\\&gt;\\|\\&lt;tinyint\\&gt;\\|\\&lt;touch\\&gt;\\|\\&lt;transactions\\&gt;\\|\\&lt;unarchive\\&gt;\\|\\&lt;undo\\&gt;\\|\\&lt;uniontype\\&gt;\\|\\&lt;unlock\\&gt;\\|\\&lt;unset\\&gt;\\|\\&lt;unsigned\\&gt;\\|\\&lt;uri\\&gt;\\|\\&lt;use\\&gt;\\|\\&lt;utc\\&gt;\\|\\&lt;utctimestamp\\&gt;\\|\\&lt;value_type\\&gt;\\|\\&lt;view\\&gt;\\|\\&lt;while\\&gt;\\|\\&lt;year\\&gt;\\&lt;all\\&gt;\\|\\&lt;alter\\&gt;\\|\\&lt;and\\&gt;\\|\\&lt;array\\&gt;\\|\\&lt;as\\&gt;\\|\\&lt;authorization\\&gt;\\|\\&lt;between\\&gt;\\|\\&lt;bigint\\&gt;\\|\\&lt;binary\\&gt;\\|\\&lt;boolean\\&gt;\\|\\&lt;both\\&gt;\\|\\&lt;by\\&gt;\\|\\&lt;case\\&gt;\\|\\&lt;cast\\&gt;\\|\\&lt;char\\&gt;\\|\\&lt;column\\&gt;\\|\\&lt;conf\\&gt;\\|\\&lt;create\\&gt;\\|\\&lt;cross\\&gt;\\|\\&lt;cube\\&gt;\\|\\&lt;current\\&gt;\\|\\&lt;current_date\\&gt;\\|\\&lt;current_timestamp\\&gt;\\|\\&lt;cursor\\&gt;\\|\\&lt;database\\&gt;\\|\\&lt;decimal\\&gt;\\|\\&lt;delete\\&gt;\\|\\&lt;describe\\&gt;\\|\\&lt;distinct\\&gt;\\|\\&lt;double\\&gt;\\|\\&lt;drop\\&gt;\\|\\&lt;else\\&gt;\\|\\&lt;end\\&gt;\\|\\&lt;exchange\\&gt;\\|\\&lt;exists\\&gt;\\|\\&lt;extended\\&gt;\\|\\&lt;external\\&gt;\\|\\&lt;fetch\\&gt;\\|\\&lt;float\\&gt;\\|\\&lt;following\\&gt;\\|\\&lt;for\\&gt;\\|\\&lt;from\\&gt;\\|\\&lt;full\\&gt;\\|\\&lt;function\\&gt;\\|\\&lt;grant\\&gt;\\|\\&lt;group\\&gt;\\|\\&lt;grouping\\&gt;\\|\\&lt;having\\&gt;\\|\\&lt;if\\&gt;\\|\\&lt;import\\&gt;\\|\\&lt;in\\&gt;\\|\\&lt;inner\\&gt;\\|\\&lt;insert\\&gt;\\|\\&lt;int\\&gt;\\|\\&lt;intersect\\&gt;\\|\\&lt;interval\\&gt;\\|\\&lt;into\\&gt;\\|\\&lt;is\\&gt;\\|\\&lt;join\\&gt;\\|\\&lt;lateral\\&gt;\\|\\&lt;left\\&gt;\\|\\&lt;less\\&gt;\\|\\&lt;like\\&gt;\\|\\&lt;local\\&gt;\\|\\&lt;macro\\&gt;\\|\\&lt;map\\&gt;\\|\\&lt;more\\&gt;\\|\\&lt;not\\&gt;\\|\\&lt;null\\&gt;\\|\\&lt;of\\&gt;\\|\\&lt;on\\&gt;\\|\\&lt;or\\&gt;\\|\\&lt;order\\&gt;\\|\\&lt;out\\&gt;\\|\\&lt;outer\\&gt;\\|\\&lt;over\\&gt;\\|\\&lt;partialscan\\&gt;\\|\\&lt;partition\\&gt;\\|\\&lt;percent\\&gt;\\|\\&lt;preceding\\&gt;\\|\\&lt;preserve\\&gt;\\|\\&lt;procedure\\&gt;\\|\\&lt;range\\&gt;\\|\\&lt;reads\\&gt;\\|\\&lt;reduce\\&gt;\\|\\&lt;revoke\\&gt;\\|\\&lt;right\\&gt;\\|\\&lt;rollup\\&gt;\\|\\&lt;row\\&gt;\\|\\&lt;rows\\&gt;\\|\\&lt;select\\&gt;\\|\\&lt;set\\&gt;\\|\\&lt;smallint\\&gt;\\|\\&lt;table\\&gt;\\|\\&lt;tablesample\\&gt;\\|\\&lt;then\\&gt;\\|\\&lt;timestamp\\&gt;\\|\\&lt;to\\&gt;\\|\\&lt;transform\\&gt;\\|\\&lt;trigger\\&gt;\\|\\&lt;truncate\\&gt;\\|\\&lt;unbounded\\&gt;\\|\\&lt;union\\&gt;\\|\\&lt;uniquejoin\\&gt;\\|\\&lt;update\\&gt;\\|\\&lt;user\\&gt;\\|\\&lt;using\\&gt;\\|\\&lt;utc_tmestamp\\&gt;\\|\\&lt;values\\&gt;\\|\\&lt;varchar\\&gt;\\|\\&lt;when\\&gt;\\|\\&lt;where\\&gt;\\|\\&lt;window\\&gt;\\|\\&lt;with\\&gt;/\\U&amp;/gendfuncaugroup black_on_save  autocmd!  autocmd BufWritePre *.py Blackaugroup endlet g:XkbSwitchEnabled = 1map &lt;leader&gt;ma :ma xmap ga &lt;Plug&gt;(EasyAlign)nmap ga &lt;Plug&gt;(EasyAlign)&quot; fun! DeleteAllBuffersInWindow()    &quot; let s:curWinNr = winnr()    &quot; if winbufnr(s:curWinNr) == 1        &quot; ret    &quot; endif    &quot; let s:curBufNr = bufnr(&quot;%&quot;)    &quot; exe &quot;bn&quot;    &quot; let s:nextBufNr = bufnr(&quot;%&quot;)    &quot; while s:nextBufNr != s:curBufNr        &quot; exe &quot;bn&quot;        &quot; exe &quot;bdel &quot;.s:nextBufNr        &quot; let s:nextBufNr = bufnr(&quot;%&quot;)    &quot; endwhile&quot; endfun&quot; map &lt;leader&gt;&lt;leader&gt;bda     :call DeleteAllBuffersInWindow()map &lt;leader&gt;&lt;leader&gt;- :ChooseWin&lt;CR&gt;let g:choosewin_overlay_enable = 1map &lt;leader&gt;&lt;leader&gt;f :!black %&lt;CR&gt;&quot; map &lt;leader&gt;&lt;leader&gt;s &lt;Plug&gt;(easymotion-s)&quot; map &lt;leader&gt;&lt;leader&gt;f &lt;Plug&gt;(easymotion-f)nmap &lt;Leader&gt;; &lt;Plug&gt;(easymotion-next)nmap &lt;Leader&gt;, &lt;Plug&gt;(easymotion-prev)&quot; map &lt;Leader&gt;&lt;leader&gt; &lt;Plug&gt;(easymotion-prefix)&quot; nmap gw        :InteractiveWindow&lt;CR&gt;&quot; nmap &lt;leader&gt;w :InteractiveWindow&lt;CR&gt;nmap ]h &lt;Plug&gt;(GitGutterNextHunk)nmap [h &lt;Plug&gt;(GitGutterPrevHunk)hi   MarkWord1    ctermbg=Cyan           ctermfg=Black    guibg=#FFDAB9 guifg=Blackhi   MarkWord2    ctermbg=Green          ctermfg=Black    guibg=#2F4F4F guifg=Blackhi   MarkWord3    ctermbg=Yellow         ctermfg=Black    guibg=#191970 guifg=Blackhi   MarkWord4    ctermbg=Red            ctermfg=Black    guibg=#40E0D0 guifg=Blackhi   MarkWord5    ctermbg=Magenta        ctermfg=Black    guibg=#00FF00 guifg=Blackhi   MarkWord6    ctermbg=Blue           ctermfg=Black    guibg=#FFFF00 guifg=Blackhi   MarkWord7    ctermbg=Brown          ctermfg=Black    guibg=#D2691E guifg=Blackhi   MarkWord8    ctermbg=LightCyan      ctermfg=Red      guibg=#FF0000 guifg=Blackhi   MarkWord9    ctermbg=LightGreen     ctermfg=Red      guibg=#9400D3 guifg=Blackhi   MarkWord10   ctermbg=LightYellow    ctermfg=Red      guibg=#CDB38B guifg=Blackhi   MarkWord11   ctermbg=LightRed       ctermfg=Red      guibg=#27408B guifg=Blackhi   MarkWord12   ctermbg=LightMagenta   ctermfg=Red      guibg=#E0FFFF guifg=Blackhi   MarkWord13   ctermbg=LightBlue      ctermfg=Red      guibg=#00CD00 guifg=Blackhi   MarkWord14   ctermbg=DarkBlue       ctermfg=Blue     guibg=#FFEC8B guifg=Blackhi   MarkWord15   ctermbg=DarkGreen      ctermfg=Blue     guibg=#FFD700 guifg=Blackhi   MarkWord16   ctermbg=DarkCyan       ctermfg=Blue     guibg=#8B658B guifg=Blackhi   MarkWord17   ctermbg=DarkRed        ctermfg=Blue     guibg=#8B3A3A guifg=Blackhi   MarkWord18   ctermbg=DarkMagenta    ctermfg=Blue     guibg=#FF7F24 guifg=Blackhi   MarkWord19   ctermbg=DarkYellow     ctermfg=Blue     guibg=#CD2626 guifg=Blackhi   MarkWord20   ctermbg=DarkGray       ctermfg=Blue     guibg=#FF7F00 guifg=Blacknoremap &lt;leader&gt;&lt;leader&gt;ff :&lt;C-U&gt;&lt;C-R&gt;=printf(&quot;Leaderf file %s&quot;, &quot;&quot;)&lt;CR&gt;&lt;CR&gt;noremap &lt;leader&gt;&lt;leader&gt;fm :&lt;C-U&gt;&lt;C-R&gt;=printf(&quot;Leaderf mru %s&quot;, &quot;&quot;)&lt;CR&gt;&lt;CR&gt;noremap &lt;leader&gt;&lt;leader&gt;fh :Leaderf cmdHistory &lt;CR&gt;noremap &lt;leader&gt;&lt;leader&gt;ft :&lt;C-U&gt;&lt;C-R&gt;=printf(&quot;Leaderf tag %s&quot;, &quot;&quot;)&lt;CR&gt;&lt;CR&gt;noremap &lt;leader&gt;&lt;leader&gt;fr :&lt;C-U&gt;&lt;C-R&gt;=printf(&quot;Leaderf --recall&quot;)&lt;CR&gt;&lt;CR&gt;noremap &lt;C-G&gt; :&lt;C-U&gt;&lt;C-R&gt;=printf(&quot;Leaderf! rg --current-buffer -e %s &quot;, expand(&quot;&lt;cword&gt;&quot;))&lt;CR&gt;noremap &lt;C-F&gt; :&lt;C-U&gt;&lt;C-R&gt;=printf(&quot;Leaderf! rg --stayOpen -g &#x27;*.hql&#x27; -e %s  &quot;, expand(&quot;&lt;cword&gt;&quot;))&lt;CR&gt;noremap  fr :&lt;C-U&gt;Leaderf! rg --recall&lt;CR&gt;let g:Lf_GtagsAutoGenerate = 0let g:Lf_Gtagslabel = &#x27;native-pygments&#x27;:imap &lt;C-J&gt; &lt;Plug&gt;snipMateNextOrTrigger:smap &lt;C-J&gt; &lt;Plug&gt;snipMateNextOrTriggerlet g:netrw_nogx = 1 &quot; disable netrw&#x27;s gx mapping.nmap &lt;leader&gt;gx :OpenBrowser &lt;c-r&gt;&lt;c-a&gt;&lt;CR&gt;vmap &lt;leader&gt;gx :OpenBrowser &lt;c-r&gt;&lt;c-a&gt;&lt;CR&gt;function! HandleURL()  let s:uri = matchstr(getline(&quot;.&quot;), &#x27;[a-z]*:\\/\\/[^ &gt;,;]*&#x27;)  echo s:uri  if s:uri != &quot;&quot;    execute &quot;!open &#x27;&quot;.s:uri.&quot;&#x27;&quot;  else    echo &quot;No URI found in line.&quot;  endifendfunctionmap &lt;leader&gt;&lt;leader&gt;u :call HandleURL()&lt;cr&gt;map &lt;leader&gt;&lt;leader&gt;gs :Gstatus&lt;CR&gt; &quot; https://data.bytedance.net/coral/datamap/detail/table_info/HiveTable/ea_rpt/&#123;query&#125;/block_info#group=default&quot; https://data.bytedance.net/coral/datamap/detail/data_preview/HiveTable/ea_rpt/&#123;query&#125;=defaultlet g:openbrowser_search_engines = &#123;\\   &#x27;stg&#x27;:&#x27;https://data.bytedance.net/coral/datamap/detail/table_info/hive/ea_stg/&#123;query&#125;&#x27;,\\   &#x27;ods&#x27;:&#x27;https://data.bytedance.net/coral/datamap/detail/table_info/hive/ea_ods/&#123;query&#125;&#x27;,\\   &#x27;mds&#x27;:&#x27;https://data.bytedance.net/coral/datamap/detail/table_info/hive/ea_mds/&#123;query&#125;&#x27;,\\   &#x27;dm&#x27; :&#x27;https://data.bytedance.net/coral/datamap/detail/table_info/hive/ea_dm/&#123;query&#125;&#x27;,\\   &#x27;rpt&#x27;:&#x27;https://data.bytedance.net/coral/datamap/detail/table_info/hive/ea_rpt/&#123;query&#125;&#x27;,\\   &#x27;coral&#x27;: &#x27;https://data.bytedance.net/coral/datamap_new/result?query=&#123;query&#125;&#x27;,\\   &#x27;trans&#x27;: &#x27;https://translate.google.com.hk/?sl=zh-CN&amp;tl=en&amp;text=&#123;query&#125;&amp;op=translate&#x27;,\\   &#x27;manta&#x27;:&#x27;https://data.bytedance.net/manta/monitor/hive?current=1&amp;is_trigger=false&amp;limit=10&amp;monitor_state=all&amp;monitor_types=all&amp;projects=cn_532&amp;query=&#123;query&#125;&amp;search_type=db_tb_name&amp;type=cn&#x27;,\\   &#x27;self&#x27;:&#x27;https://data.bytedance.net/manta/rule/hive/sql?alarm_level=all&amp;is_myself=false&amp;is_trigger=false&amp;monitor_state=all&amp;monitor_types=all&amp;query=&#123;query&#125;&amp;search_type=monitor_name&amp;type=cn&amp;projects=cn_532&#x27;,\\   &#x27;manta_report&#x27;:&#x27;https://data.bytedance.net/manta/datacheck/list?is_myself=false&amp;query=&#123;query&#125;&amp;search_type=db_tb_name&amp;type=cn&#x27;\\&#125;nmap &lt;leader&gt;gg :OpenBrowserSearch &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;nmap &lt;leader&gt;gt :OpenBrowserSearch -trans &lt;C-R&gt;=expand(&quot;&lt;cword&gt;&quot;)&lt;CR&gt;&lt;CR&gt;func! MantaReport()    let l:engine = expand(&quot;&lt;cWORD&gt;&quot;)    echom l:engine    execute &#x27;silent :OpenBrowserSearch -manta_report &#x27; . l:engineendfuncfunc! Manta()    let l:engine = expand(&quot;&lt;cword&gt;&quot;)    echom l:engine    execute &#x27;silent :OpenBrowserSearch -manta &#x27; . l:engine    &quot; execute &#x27;silent :OpenBrowserSearch -self &#x27; . l:engineendfuncfunc! EchoCword()    let l:cword= expand(&quot;&lt;cword&gt;&quot;)    echom l:cwordendfuncfunc! AccessCoral()    let l:engine = expand(&quot;&lt;cword&gt;&quot;)    echom l:engine        if( stridx(l:engine, &quot;stg&quot;) == 0 )         &quot; echom &quot;stg&quot;        execute &#x27;silent :OpenBrowserSearch -stg &#x27; . l:engine        execute &#x27;silent :OpenBrowserSearch -uatstg &#x27; . l:engine    elseif(stridx(l:engine, &quot;ods&quot;) == 0)        &quot; echom &quot;ods&quot;        execute &#x27;:OpenBrowserSearch -ods &#x27; . l:engine        execute &#x27;:OpenBrowserSearch -uatods &#x27; . l:engine    elseif(stridx(l:engine, &quot;mds&quot;) == 0)        &quot; echom &quot;mds&quot;        execute &#x27;:OpenBrowserSearch -mds &#x27; . l:engine        execute &#x27;:OpenBrowserSearch -uatmds &#x27; . l:engine    elseif(stridx(l:engine, &quot;dm&quot;) == 0)        &quot; echom &quot;dm&quot;        execute &#x27;:OpenBrowserSearch -dm &#x27; . l:engine        execute &#x27;:OpenBrowserSearch -uatdm &#x27; . l:engine    elseif(stridx(l:engine, &quot;rpt&quot;) == 0)        &quot; echom &quot;rpt&quot;        execute &#x27;:OpenBrowserSearch -rpt &#x27; . l:engine        execute &#x27;:OpenBrowserSearch -uatrpt &#x27; . l:engine    elseif(stridx(l:engine, &quot;http&quot;) == 0)        execute &#x27;:OpenBrowser()&#x27;     else        echom &quot;coral&quot;        execute &#x27;:OpenBrowserSearch -coral &#x27; . l:engine    endifendfunclet g:Lf_NumberOfHighlight=1func! Findtable()    let l:table_name = expand(&quot;&lt;cword&gt;&quot;)    echo l:table_name    execute &#x27;:/).*&#x27; . l:table_nameendfunc&quot; don&#x27;t show the help in normal modelet g:Lf_HideHelp = 1let g:Lf_UseCache = 0let g:Lf_UseVersionControlTool = 0let g:Lf_IgnoreCurrentBufferName = 1&quot; popup mode&quot; let g:Lf_WindowPosition = &#x27;right&#x27;&quot;let g:Lf_ShowDevIcons = 1let g:Lf_WindowHeight = 0.2                               let g:Lf_PreviewInPopup = 1let g:Lf_StlSeparator = &#123; &#x27;left&#x27;: &quot;\\ue0b0&quot;, &#x27;right&#x27;: &quot;\\ue0b2&quot;, &#x27;font&#x27;: &quot;DejaVu Sans Mono for Powerline&quot; &#125;let g:Lf_ShowRelativePath = 1let g:Lf_PreviewResult = &#123;        \\ &#x27;File&#x27;: 1,        \\ &#x27;Buffer&#x27;: 1,        \\ &#x27;Mru&#x27;: 1,        \\ &#x27;Tag&#x27;: 1,        \\ &#x27;BufTag&#x27;: 1,        \\ &#x27;Function&#x27;: 1,        \\ &#x27;Line&#x27;: 1,        \\ &#x27;Colorscheme&#x27;: 1,        \\ &#x27;Rg&#x27;: 1,        \\ &#x27;Gtags&#x27;: 1        \\&#125;let g:Lf_PreviewHorizontalPosition = &#x27;right&#x27;                    let g:Lf_ShortcutF =&#x27;&lt;leader&gt;w&#x27;map = &lt;Plug&gt;(expand_region_expand)map - &lt;Plug&gt;(expand_region_shrink)let g:mwDefaultHighlightingPalette = &#x27;maximum&#x27;&quot; nnoremap &lt;silent&gt;&lt;Leader&gt;m m&quot; Plugin key-mappings.&quot; Note: It must be &quot;imap&quot; and &quot;smap&quot;.  It uses &lt;Plug&gt; mappings.imap &lt;C-k&gt;     &lt;Plug&gt;(neosnippet_expand_or_jump)smap &lt;C-k&gt;     &lt;Plug&gt;(neosnippet_expand_or_jump)xmap &lt;C-k&gt;     &lt;Plug&gt;(neosnippet_expand_target)&quot; SuperTab like snippets behavior.&quot; Note: It must be &quot;imap&quot; and &quot;smap&quot;.  It uses &lt;Plug&gt; mappings.&quot;imap &lt;expr&gt;&lt;TAB&gt;&quot; \\ pumvisible() ? &quot;\\&lt;C-n&gt;&quot; :&quot; \\ neosnippet#expandable_or_jumpable() ?&quot; \\    &quot;\\&lt;Plug&gt;(neosnippet_expand_or_jump)&quot; : &quot;\\&lt;TAB&gt;&quot;smap &lt;expr&gt;&lt;TAB&gt; neosnippet#expandable_or_jumpable() ?\\ &quot;\\&lt;Plug&gt;(neosnippet_expand_or_jump)&quot; : &quot;\\&lt;TAB&gt;&quot;&quot; For conceal markers.if has(&#x27;conceal&#x27;)  set conceallevel=2 concealcursor=nivendif&quot; Enable snipMate compatibility feature.let g:neosnippet#enable_snipmate_compatibility = 1&quot; Tell Neosnippet about the other snippetslet g:neosnippet#snippets_directory=&#x27;~/.vim_back/bundle/vim-snippets/snippets&#x27;imap &lt;silent&gt;&lt;script&gt;&lt;expr&gt; &lt;C-J&gt; copilot#Accept(&quot;\\&lt;CR&gt;&quot;)let g:copilot_no_tab_map = v:true&quot; for .hql filesau BufNewFile,BufRead *.hql set filetype=hive expandtabau BufNewFile,BufRead *.hql set filetype=hive expandtablet g:Lf_ShowRelativePath=1map &lt;leader&gt;cc &lt;plug&gt;NERDCommenterToggleimap &lt;silent&gt;&lt;script&gt;&lt;expr&gt; &lt;C-J&gt; copilot#Accept(&quot;\\&lt;CR&gt;&quot;)let g:copilot_no_tab_map = v:true&quot;&quot; Help Vim recognize *.sbt and *.sc as Scala filesau BufRead,BufNewFile *.sbt,*.sc set filetype=scala&quot; Used to expand decorations in worksheets&quot; nmap &lt;Leader&gt;ws &lt;Plug&gt;(coc-metals-expand-decoration)&quot;&quot; Toggle panel with Tree Views&quot;nnoremap &lt;silent&gt; &lt;space&gt;t :&lt;C-u&gt;CocCommand metals.tvp&lt;CR&gt;&quot;&quot; Toggle Tree View &#x27;metalsPackages&#x27;&quot;nnoremap &lt;silent&gt; &lt;space&gt;tp :&lt;C-u&gt;CocCommand metals.tvp metalsPackages&lt;CR&gt;&quot;&quot; Toggle Tree View &#x27;metalsCompile&#x27;&quot;nnoremap &lt;silent&gt; &lt;space&gt;tc :&lt;C-u&gt;CocCommand metals.tvp metalsCompile&lt;CR&gt;&quot;&quot; Toggle Tree View &#x27;metalsBuild&#x27;&quot;nnoremap &lt;silent&gt; &lt;space&gt;tb :&lt;C-u&gt;CocCommand metals.tvp metalsBuild&lt;CR&gt;&quot;&quot; Reveal current current class (trait or object) in Tree View &#x27;metalsPackages&#x27;&quot;nnoremap &lt;silent&gt; &lt;space&gt;tf :&lt;C-u&gt;CocCommand metals.revealInTreeView metalsPackages&lt;CR&gt;&quot; How to open the generated output file.&quot; If does not exist, graphviz.vim will automatically choose the right way depending on the platform.let g:graphviz_viewer = &#x27;open&#x27;let g:graphviz_output_format = &#x27;svg&#x27;map &lt;leader&gt;gvs :GraphvizShow&lt;CR&gt;map &lt;leader&gt;gvc :GraphvizCompile&lt;CR&gt;map &lt;leader&gt;gvg :!dot -Tsvg % -o ~/Desktop/output.svg &amp;&amp; open ~/Desktop/output.svg &lt;CR&gt;function! MyGraphViz()    :Graphviz!!endfunctionif exists(&quot;:Tabularize&quot;)  nmap &lt;Leader&gt;a= :Tabularize /=&lt;CR&gt;  vmap &lt;Leader&gt;a= :Tabularize /=&lt;CR&gt;  nmap &lt;Leader&gt;a: :Tabularize /:\\zs&lt;CR&gt;  vmap &lt;Leader&gt;a: :Tabularize /:\\zs&lt;CR&gt;endifinoremap &lt;silent&gt; &lt;Bar&gt;   &lt;Bar&gt;&lt;Esc&gt;:call &lt;SID&gt;align()&lt;CR&gt;afunction! s:align()  let p = &#x27;^\\s*|\\s.*\\s|\\s*$&#x27;  if exists(&#x27;:Tabularize&#x27;) &amp;&amp; getline(&#x27;.&#x27;) =~# &#x27;^\\s*|&#x27; &amp;&amp; (getline(line(&#x27;.&#x27;)-1) =~# p || getline(line(&#x27;.&#x27;)+1) =~# p)    let column = strlen(substitute(getline(&#x27;.&#x27;)[0:col(&#x27;.&#x27;)],&#x27;[^|]&#x27;,&#x27;&#x27;,&#x27;g&#x27;))    let position = strlen(matchstr(getline(&#x27;.&#x27;)[0:col(&#x27;.&#x27;)],&#x27;.*|\\s*\\zs.*&#x27;))    Tabularize/|/l1    normal! 0    call search(repeat(&#x27;[^|]*|&#x27;,column).&#x27;\\s\\&#123;-\\&#125;&#x27;.repeat(&#x27;.&#x27;,position),&#x27;ce&#x27;,line(&#x27;.&#x27;))  endifendfunction&quot; let g:spacevim_project_auto_root=0let g:spacevim_project_auto_root=&#x27;current&#x27;non_root = &#x27;current&#x27;_create.py &quot; . l:db . &quot; &quot; . l:tbendfunction function! DoradoOpen()  let l:keyword= expand(&quot;&lt;cWORD&gt;&quot;)  execute &quot;:AsyncRun python ~/opt/tools/common_open.py &quot; . &quot; dorado_open &quot; . l:keywordendfunction function! DoradoIdOpen()  let l:keyword= expand(&quot;&lt;cWORD&gt;&quot;)  execute &quot;:AsyncRun python ~/opt/tools/common_open.py &quot; . &quot; dorado_id_open &quot; . l:keywordendfunction function! AllCoralOpen()\tlet l:keyword= expand(&quot;&lt;cWORD&gt;&quot;)\t&quot; execute &quot;:AsyncRun python ~/opt/tools/common_open.py &quot; &quot;coral_field&quot;   . &quot; &quot; . l:keyword\t&quot; execute &quot;:AsyncRun python ~/opt/tools/common_open.py &quot; &quot;coral_block&quot;   . &quot; &quot; . l:keyword\t&quot; execute &quot;:AsyncRun python ~/opt/tools/common_open.py &quot; &quot;coral_preview&quot; . &quot; &quot; . l:keyword\t&quot; execute &quot;:AsyncRun python ~/opt/tools/common_open.py &quot; &quot;coral_produce&quot; . &quot; &quot; . l:keyword\texecute &quot;!python ~/opt/tools/common_open.py &quot; &quot;coral_field&quot;   . &quot; &quot; . l:keyword\texecute &quot;!python ~/opt/tools/common_open.py &quot; &quot;coral_block&quot;   . &quot; &quot; . l:keyword\texecute &quot;!python ~/opt/tools/common_open.py &quot; &quot;coral_preview&quot; . &quot; &quot; . l:keyword\texecute &quot;:AsyncRun python ~/opt/tools/common_open.py &quot; &quot;coral_produce&quot; . &quot; &quot; . l:keyword    &quot; sleep 10endfunction function! DirectUrl()\texecute &quot;:!python ~/opt/tools/multi_open.py &quot; . @zendfunction function! VisualSelection()    if mode()==&quot;v&quot;        let [line_start, column_start] = getpos(&quot;v&quot;)[1:2]        let [line_end, column_end] = getpos(&quot;.&quot;)[1:2]    else        let [line_start, column_start] = getpos(&quot;&#x27;&lt;&quot;)[1:2]        let [line_end, column_end] = getpos(&quot;&#x27;&gt;&quot;)[1:2]    end    if (line2byte(line_start)+column_start) &gt; (line2byte(line_end)+column_end)        let [line_start, column_start, line_end, column_end] =        \\   [line_end, column_end, line_start, column_start]    end    let lines = getline(line_start, line_end)    if len(lines) == 0            return [&#x27;&#x27;]    endif    if &amp;selection ==# &quot;exclusive&quot;        let column_end -= 1 &quot;Needed to remove the last character to make it match the visual selction    endif    if visualmode() ==# &quot;\\&lt;C-V&gt;&quot;        for idx in range(len(lines))            let lines[idx] = lines[idx][: column_end - 1]            let lines[idx] = lines[idx][column_start - 1:]        endfor    else        let lines[-1] = lines[-1][: column_end - 1]        let lines[ 0] = lines[ 0][column_start - 1:]    endif\tlet ret = join(lines, &quot;,&quot;)    &quot; echo ret    &quot; echom ret\tcall setreg(&#x27;z&#x27;, ret)    &quot; execute &quot;:!python ~/opt/tools/multi_open.py &quot; . @z\treturn retendfunctionfunction! GetDdl() abort  let l:dbtb=expand(&quot;&lt;cWORD&gt;&quot;)  echo l:dbtb  execute &quot;:AsyncRun python ~/opt/tools/ddl.py &quot; . l:dbtb endfunctionfunction! GetTask() abort  let l:dbtb=expand(&quot;&lt;cWORD&gt;&quot;)  echo l:dbtb  execute &quot;:AsyncRun python ~/opt/tools/task.py &quot; . l:dbtb endfunctionmap &lt;leader&gt;&lt;leader&gt;m :MaximizerToggle &lt;CR&gt;map &lt;F10&gt; :call MyGraphViz()&lt;CR&gt;map &lt;F2&gt; :MaximizerToggle&lt;CR&gt;map &lt;F4&gt; :call Findtable()&lt;CR&gt;map &lt;F5&gt; :call TritonAuthApply()&lt;CR&gt;map &lt;F6&gt; :call SqlToUpper()&lt;CR&gt;map &lt;F7&gt; :call PlantumlOpen()&lt;CR&gt;map &lt;F8&gt; :call Manta()&lt;CR&gt;map &lt;F9&gt; :call AccessCoral()&lt;CR&gt;map &lt;leader&gt;ca :call AllCoralOpen()&lt;CR&gt;map &lt;leader&gt;dh :call SubStitute()&lt;CR&gt;map &lt;leader&gt;do :call DoradoOpen()&lt;CR&gt;map &lt;leader&gt;dp :call DataPreview()&lt;CR&gt;map &lt;leader&gt;dt :call DoradoIdOpen()&lt;CR&gt;map &lt;leader&gt;mc :call MantaDataExploreCreate()&lt;CR&gt;map &lt;leader&gt;mp :call MantaReport()&lt;CR&gt;function! MultiOpenFunc()    let l:content = VisualSelection()    echom l:content     &quot; sleep 5    execute &quot;:!python ~/opt/tools/multi_open.py &quot; . l:contentendfunction function! CoralBatchOp(func_select)    let l:content = VisualSelection()    echom l:content    echom &quot;===================================&quot;    echom a:func_select    echom &quot;===================================&quot;    if a:func_select ==# &quot;dorado_open_batch&quot;        execute &quot;:!python ~/opt/tools/common_open.py &quot; . &quot;dorado_open_batch&quot; . &quot; &quot; .  l:content    elseif a:func_select ==# &quot;dorado_id_open_batch&quot;        execute &quot;:!python ~/opt/tools/common_open.py &quot; . &quot;dorado_id_open_batch&quot; . &quot; &quot; .  l:content    elseif a:func_select ==# &quot;coral_field_batch&quot;        execute &quot;:!python ~/opt/tools/common_open.py &quot; . &quot;coral_field_batch&quot; . &quot; &quot; .  l:content    elseif a:func_select ==# &quot;coral_block_batch&quot;        execute &quot;:!python ~/opt/tools/common_open.py &quot; . &quot;coral_block_batch&quot; . &quot; &quot; .  l:content    elseif a:func_select ==# &quot;coral_preview_batch&quot;        execute &quot;:!python ~/opt/tools/common_open.py &quot; . &quot;coral_preview_batch&quot; . &quot; &quot; .  l:content    elseif a:func_select ==# &quot;coral_produce_batch&quot;        execute &quot;:!python ~/opt/tools/common_open.py &quot; . &quot;coral_produce_batch&quot; . &quot; &quot; .  l:content    endif     &quot; sleep 5endfunctionfunction! OpenInstances()    let l:content = VisualSelection()    echom l:content    execute &quot;:!python /Users/bytedance/opt/tools/instance.py &quot; . l:content     sleep 5endfunctionif !has(&#x27;python3&#x27;)  echo &quot;Error: Required vim compiled with +python3&quot;  finishendifxnoremap &lt;Leader&gt;dm :&lt;C-u&gt;call MultiOpenFunc()&lt;CR&gt; map &lt;leader&gt;dg :call GenerateSQL()&lt;CR&gt;map &lt;leader&gt;dd :call GetDdl()&lt;CR&gt;map &lt;leader&gt;dt :call GetTask()&lt;CR&gt;xnoremap &lt;Leader&gt;do :&lt;C-u&gt;call CoralBatchOp(&quot;dorado_open_batch&quot;)&lt;CR&gt; xnoremap &lt;Leader&gt;di :&lt;C-u&gt;call CoralBatchOp(&quot;dorado_id_open_batch&quot;)&lt;CR&gt; xnoremap &lt;Leader&gt;df :&lt;C-u&gt;call CoralBatchOp(&quot;coral_field_batch&quot;)&lt;CR&gt; xnoremap &lt;Leader&gt;db :&lt;C-u&gt;call CoralBatchOp(&quot;coral_block_batch&quot;)&lt;CR&gt; xnoremap &lt;Leader&gt;dv :&lt;C-u&gt;call CoralBatchOp(&quot;coral_preview_batch&quot;)&lt;CR&gt; xnoremap &lt;Leader&gt;dp :&lt;C-u&gt;call CoralBatchOp(&quot;coral_produce_batch&quot;)&lt;CR&gt; xnoremap &lt;Leader&gt;di :&lt;C-u&gt;call OpenInstances()&lt;CR&gt; function! SubStitute()    :%s/ea_stg/ea_lark_expense_sensitive/g    :%s/ea_ods/ea_lark_expense_sensitive/g    :%s/ea_mds/ea_lark_expense_sensitive/g    :%s/mds_/dwd_/gendfunction map &lt;leader&gt;pr :retab&lt;CR&gt;highlight BookmarkSign ctermbg=NONE ctermfg=160highlight BookmarkLine ctermbg=194 ctermfg=NONElet g:bookmark_sign = &#x27;♥&#x27;let g:bookmark_highlight_lines = 1function! LibrarySorter()python3 &lt;&lt; EOFimport vimEOFendfunctionnnoremap &lt;c-j&gt; &lt;cmd&gt;call smoothie#do(&quot;\\&lt;C-D&gt;&quot;) &lt;CR&gt;map &lt;c-d&gt; &lt;cmd&gt;call smoothie#downwards()&lt;CR&gt;vnoremap &lt;c-j&gt; &lt;cmd&gt;call smoothie#do(&quot;\\&lt;C-D&gt;&quot;) &lt;CR&gt;let g:bookmark_save_per_working_dir = 1&quot; let g:LanguageClient_serverCommands = &#123;    &quot; \\ &#x27;rust&#x27;: [&#x27;~/.cargo/bin/rustup&#x27;, &#x27;run&#x27;, &#x27;stable&#x27;, &#x27;rls&#x27;],    &quot; \\ &#125;&quot; noremap &lt;silent&gt; gt&lt;Plug&gt;(lcn-definition)let g:LanguageClient_serverCommands = &#123;\\ &#x27;rust&#x27;: [&#x27;rust-analyzer&#x27;],\\ &#125;nmap &lt;silent&gt;ldg :call CocAction(&#x27;diagnosticInfo&#x27;)&lt;CR&gt;nmap &lt;silent&gt;ldf :call CocAction(&#x27;jumpDefinition&#x27;)&lt;CR&gt;nmap &lt;silent&gt;ljd :call CocAction(&#x27;jumpDeclaration&#x27;)&lt;CR&gt;nmap &lt;silent&gt;ltd :call CocAction(&#x27;jumpTypeDefinition&#x27;)&lt;CR&gt;let g:material_style = &quot;palenight&quot;&quot;&quot; nnoremap &lt;Leader&gt;dd :call vimspector#Launch()&lt;CR&gt;&quot; nnoremap &lt;Leader&gt;de :call vimspector#Reset()&lt;CR&gt;&quot; nnoremap &lt;Leader&gt;dc :call vimspector#Continue()&lt;CR&gt;&quot;&quot; nnoremap &lt;Leader&gt;dt :call vimspector#ToggleBreakpoint()&lt;CR&gt;&quot; nnoremap &lt;Leader&gt;dT :call vimspector#ClearBreakpoints()&lt;CR&gt;&quot;&quot; nmap &lt;Leader&gt;dk &lt;Plug&gt;VimspectorRestart&quot; nmap &lt;Leader&gt;dh &lt;Plug&gt;VimspectorStepOut&quot; nmap &lt;Leader&gt;dl &lt;Plug&gt;VimspectorStepInto&quot; nmap &lt;Leader&gt;dj &lt;Plug&gt;VimspectorStepOver&quot;&quot;let g:vimspector_enable_mappings = &#x27;HUMAN&#x27;map &lt;leader&gt;fdi :setlocal foldmethod=indent&lt;CR&gt;map &lt;leader&gt;fdm :setLocal foldmethod=manual&lt;CR&gt;map &lt;leader&gt;&lt;leader&gt;m :Mark&lt;CR&gt;let g:user_emmet_settings = &#123;\\  &#x27;php&#x27; : &#123;\\    &#x27;extends&#x27; : &#x27;html&#x27;,\\  &#125;,\\  &#x27;scala&#x27; : &#123;\\    &#x27;extends&#x27; : &#x27;html&#x27;,\\  &#125;,\\  &#x27;java&#x27; : &#123;\\    &#x27;extends&#x27; : &#x27;html&#x27;,\\  &#125;,\\&#125;let g:user_emmet_install_global = 0autocmd FileType html,css,java,scala,dot,tsx EmmetInstalllet g:user_emmet_leader_key=&#x27;&lt;C-Z&gt;&#x27;let g:typescript_compiler_binary = &#x27;tsc&#x27;let g:typescript_compiler_options = &#x27;&#x27;autocmd FileType typescript :set makeprg=tscendfunctionfunction! myspacevim#after() abortendfunction\n","slug":"vimconfig","date":"2023-06-06T06:57:14.000Z","categories_index":"","tags_index":"vim","author_index":"艾木简 安斤涅尔"},{"id":"d161500ac7b3c518546366fc4b6ac5c1","title":"about","content":"ABOUT ME111** I am looking for a remote, part-time data warehouse development job! **\n","slug":"about","date":"2023-05-11T13:42:23.000Z","categories_index":"","tags_index":"about","author_index":"艾木简 安斤涅尔"},{"id":"861e9c1e981aab76fbc2a46137fd0648","title":"HelloWorld","content":"HELLO WORLD\nhttps://www.youtube.com/watch?v=dq_mBJj1sjg\n\n间奏部分参照https://www.bilibili.com/video/BV1TQ4y1d7J1/?spm_id_from=333.337.search-card.all.click&amp;vd_source=c3c2e2f79b08e119e00c69923ed95cbb\n\n\n","slug":"HelloWorld","date":"2023-05-11T09:17:25.000Z","categories_index":"","tags_index":"A","author_index":"艾木简 安斤涅尔"}]